diff --git a/src/FlowAware.cpp b/src/FlowAware.cpp
index 4a1ec6b..5523ef9 100644
--- a/src/FlowAware.cpp
+++ b/src/FlowAware.cpp
@@ -33,6 +33,9 @@
 #include <regex>
 #include <string>
 
+#include <iostream>
+
+
 using namespace llvm;
 using namespace IR2Vec;
 
@@ -222,8 +225,13 @@ void IR2Vec_FA::generateFlowAwareEncodingsForFunction(
   int noOfFunc = 0;
   for (auto &f : M) {
 
+    std::cout << "Running getActualName\n";
     auto Result = getActualName(&f);
-    if (!f.isDeclaration() && Result == name) {
+    std::cout << "Debug 4\n";
+    std::cout << "Is Result nullptr: " << (Result == nullptr) << "\n";
+    // std::cout << "getActualName Result: " << Result << "\n";
+    if (!f.isDeclaration() && 
+      Result == name) {
       // If funcName is matched with one of the functions in module, we
       // will update funcVecMap of it and it's child functions recursively
       llvm::SmallSet<const Function *, 16> visitedFunctions;
diff --git a/src/utils.cpp b/src/utils.cpp
index b9fc0e5..da991c5 100644
--- a/src/utils.cpp
+++ b/src/utils.cpp
@@ -10,6 +10,8 @@
 #include "IR2Vec.h"
 #include "Vocabulary.h"
 #include <fstream>
+#include <iostream>
+
 #include <string>
 using namespace llvm;
 using namespace IR2Vec;
@@ -49,31 +51,37 @@ void IR2Vec::scaleVector(Vector &vec, float factor) {
 
 // Function to get demangled function name
 std::string IR2Vec::getDemagledName(const llvm::Function *function) {
-  auto functionName = function->getName().str();
-  std::size_t sz = 17;
-  int status;
-  char *const readable_name =
-      __cxa_demangle(functionName.c_str(), 0, &sz, &status);
-  auto demangledName =
-      status == 0 ? std::string(readable_name) : std::string(functionName);
-  free(readable_name);
+  // auto functionName = function->getName().str();
+  // std::size_t sz = 17;
+  // int status;
+  // char *const readable_name =
+  //     __cxa_demangle(functionName.c_str(), 0, &sz, &status);
+  // auto demangledName =
+  //     status == 0 ? std::string(readable_name) : std::string(functionName);
+  // free(readable_name);
+  // return demangledName;
+
+  auto demangledName = function->getName().str();
   return demangledName;
 }
 
 // Function to get actual function name
 char *IR2Vec::getActualName(llvm::Function *function) {
-  auto functionName = function->getName().str();
-  auto demangledName = getDemagledName(function);
-  size_t Size = 1;
-  char *Buf = static_cast<char *>(std::malloc(Size));
-  const char *mangled = functionName.c_str();
-  char *baseName;
-  llvm::ItaniumPartialDemangler Mangler;
-  if (Mangler.partialDemangle(mangled)) {
-    baseName = &demangledName[0];
-  } else {
-    baseName = Mangler.getFunctionBaseName(Buf, &Size);
-  }
+  // auto functionName = function->getName().str();
+  // auto demangledName = getDemagledName(function);
+  // size_t Size = 1;
+  // char *Buf = static_cast<char *>(std::malloc(Size));
+  // const char *mangled = functionName.c_str();
+  // char *baseName;
+  // llvm::ItaniumPartialDemangler Mangler;
+  // if (Mangler.partialDemangle(mangled)) {
+  //   baseName = &demangledName[0];
+  // } else {
+  //   baseName = Mangler.getFunctionBaseName(Buf, &Size);
+  // }
+  // return baseName;
+  
+  auto baseName = function->getName().str().data();
   return baseName;
 }
 
